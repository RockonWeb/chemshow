"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

import streamlit as st
import pandas as pd
import logging
from typing import Dict, Any
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
config_dir = Path(__file__).parent / "config"
services_dir = Path(__file__).parent / "services"
components_dir = Path(__file__).parent / "components"

sys.path.insert(0, str(config_dir))
sys.path.insert(0, str(services_dir))
sys.path.insert(0, str(components_dir))

from config.settings import (
    UI_CONFIG, LOGGING_CONFIG, get_database_paths,
    SEARCH_CONFIG, SEARCH_PRESETS
)
from services.database import get_database_stats
from services.search_service import search_service
from components.styles import inject_styles
from components.utils import create_stats_html, format_search_query
from components.search_form import (
    render_search_form, handle_search_form,
    render_pagination, render_view_toggle,
    render_results_header, render_close_details_buttons
)
from components.cards import (
    render_metabolite_card, render_enzyme_card,
    render_protein_card, render_carbohydrate_card,
    render_lipid_card
)
from components.details import (
    show_metabolite_details, show_enzyme_details,
    show_protein_details, show_carbohydrate_details,
    show_lipid_details
)
from components.visualization_3d import (
    render_3d_structure, display_molecule_properties,
    check_dependencies, install_instructions
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOGGING_CONFIG["level"]),
    format=LOGGING_CONFIG["format"]
)
logger = logging.getLogger(__name__)

# -------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    defaults = {
        "page": 1,
        "page_size": UI_CONFIG["default_page_size"],
        "search_submitted": False,
        "view_mode": "–ö–∞—Ä—Ç–æ—á–∫–∏",
        "show_metabolite_details": False,
        "show_enzyme_details": False,
        "show_protein_details": False,
        "show_carbohydrate_details": False,
        "show_lipid_details": False,
        "search_results": {},
        "selected_metabolite": None,
        "selected_enzyme": None,
        "selected_protein": None,
        "selected_carbohydrate": None,
        "selected_lipid": None,
        "last_query": "",
        "last_mass": None,
        "last_organism_type": "–í—Å–µ",
        "last_tolerance_ppm": 1000,
        "show_3d_structure": False,
        "show_molecule_properties": False,
        "modal_structure_smiles": None,
        "modal_structure_action": None,
        "current_smiles": None,
        "current_molecule_name": None
    }

    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value


def close_all_dialogs():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏"""
    st.session_state.show_metabolite_details = False
    st.session_state.show_enzyme_details = False
    st.session_state.show_protein_details = False
    st.session_state.show_carbohydrate_details = False
    st.session_state.show_lipid_details = False
    st.session_state.selected_metabolite = None
    st.session_state.selected_enzyme = None
    st.session_state.selected_protein = None
    st.session_state.selected_carbohydrate = None
    st.session_state.selected_lipid = None


def open_dialog_safely(dialog_type: str, entity: Dict[str, Any]):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –∑–∞–∫—Ä—ã–≤–∞—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ"""
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
    close_all_dialogs()
    
    # –ó–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –¥–∏–∞–ª–æ–≥
    if dialog_type == "metabolite":
        st.session_state.selected_metabolite = entity
        st.session_state.show_metabolite_details = True
    elif dialog_type == "enzyme":
        st.session_state.selected_enzyme = entity
        st.session_state.show_enzyme_details = True
    elif dialog_type == "protein":
        st.session_state.selected_protein = entity
        st.session_state.show_protein_details = True
    elif dialog_type == "carbohydrate":
        st.session_state.selected_carbohydrate = entity
        st.session_state.show_carbohydrate_details = True
    elif dialog_type == "lipid":
        st.session_state.selected_lipid = entity
        st.session_state.show_lipid_details = True


def render_database_stats():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        totals = get_database_stats()
        stats_html = create_stats_html(totals)
        st.markdown(stats_html, unsafe_allow_html=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    return True


def handle_search_and_display():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    # –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞
    form_data = render_search_form()
    search_params = handle_search_form(form_data)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    if search_params.get("search_submitted"):
        with st.status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...", expanded=False):
            try:
                results = search_service.unified_search(
                    query=search_params.get("query"),
                    mass=search_params.get("mass"),
                    tolerance_ppm=search_params.get("tolerance_ppm", 1000),
                    organism_type=search_params.get("organism_type", "–í—Å–µ"),
                    page=st.session_state.page,
                    page_size=st.session_state.page_size
                )

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.session_state.search_results = results
                st.session_state.last_query = search_params.get("query", "")
                st.session_state.last_mass = search_params.get("mass")
                st.session_state.last_organism_type = search_params.get("organism_type", "–í—Å–µ")
                st.session_state.last_tolerance_ppm = search_params.get("tolerance_ppm", 1000)
                st.session_state.search_submitted = True

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {str(e)}")
                return

        st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.get("search_submitted") and st.session_state.get("search_results"):
        display_search_results()


def display_search_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    results = st.session_state.get("search_results", {})

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    search_totals = search_service.get_search_totals(results)
    total_all = sum(search_totals.values())

    if total_all > 0:
        render_results_header(total_all, {
            "query": st.session_state.get("last_query", ""),
            "mass": st.session_state.get("last_mass")
        })

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞
        new_view = render_view_toggle(st.session_state.view_mode)
        if new_view:
            st.session_state.view_mode = new_view

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        display_entity_results(results, "metabolites", "üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã",
                              render_metabolite_card, show_metabolite_details)
        display_entity_results(results, "enzymes", "üß™ –§–µ—Ä–º–µ–Ω—Ç—ã",
                              render_enzyme_card, show_enzyme_details)
        display_entity_results(results, "proteins", "üî¨ –ë–µ–ª–∫–∏",
                              render_protein_card, show_protein_details)
        display_entity_results(results, "carbohydrates", "üåæ –£–≥–ª–µ–≤–æ–¥—ã",
                              render_carbohydrate_card, show_carbohydrate_details)
        display_entity_results(results, "lipids", "ü´ß –õ–∏–ø–∏–¥—ã",
                              render_lipid_card, show_lipid_details)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        max_results = search_service.get_max_results_for_pagination(search_totals)
        if max_results > st.session_state.page_size:
            new_page = render_pagination(
                st.session_state.page,
                (max_results + st.session_state.page_size - 1) // st.session_state.page_size,
                st.session_state.page_size,
                max_results
            )
            if new_page:
                st.session_state.page = new_page
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                results = search_service.unified_search(
                    query=st.session_state.get("last_query", ""),
                    mass=st.session_state.get("last_mass"),
                    tolerance_ppm=st.session_state.get("last_tolerance_ppm", 1000),
                    organism_type=st.session_state.get("last_organism_type", "–í—Å–µ"),
                    page=st.session_state.page,
                    page_size=st.session_state.page_size
                )
                st.session_state.search_results = results
                st.rerun()
    else:
        st.warning("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")


def display_entity_results(results: Dict, entity_type: str, header: str,
                          card_renderer, details_renderer):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    entities = results.get(entity_type, {}).get("data", [])
    if not entities:
        return

    st.subheader(f"{header} ({len(entities)})")

    if st.session_state.view_mode == "–¢–∞–±–ª–∏—Ü–∞":
        # –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥
        display_entity_table(entities, entity_type)
    else:
        # –ö–∞—Ä—Ç–æ—á–Ω—ã–π –≤–∏–¥
        cols = st.columns(UI_CONFIG["cards_per_row"])
        for idx, entity in enumerate(entities):
            with cols[idx % UI_CONFIG["cards_per_row"]]:
                card_key = f"{entity_type[:-1]}_card_{entity.get('id', hash(str(entity)))}"
                card_renderer(entity, card_key)


def display_entity_table(entities: list, entity_type: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ"""
    if not entities:
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    rows = []
    for entity in entities:
        if entity_type == "metabolites":
            rows.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": entity.get("name_ru", "") or entity.get("name", ""),
                "–§–æ—Ä–º—É–ª–∞": entity.get("formula", ""),
                "–ú–∞—Å—Å–∞": float(entity["exact_mass"]) if entity.get("exact_mass") else None,
                "–ö–ª–∞—Å—Å": entity.get("class_name", ""),
            })
        elif entity_type == "enzymes":
            rows.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": entity.get("name_ru", "") or entity.get("name", ""),
                "EC –Ω–æ–º–µ—Ä": entity.get("ec_number", ""),
                "–û—Ä–≥–∞–Ω–∏–∑–º": entity.get("organism", ""),
                "–°–µ–º–µ–π—Å—Ç–≤–æ": entity.get("family", ""),
            })
        elif entity_type == "proteins":
            rows.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": entity.get("name_ru", "") or entity.get("name", ""),
                "–§—É–Ω–∫—Ü–∏—è": entity.get("function", ""),
                "–û—Ä–≥–∞–Ω–∏–∑–º": entity.get("organism", ""),
                "–°–µ–º–µ–π—Å—Ç–≤–æ": entity.get("family", ""),
            })

    if rows:
        df = pd.DataFrame(rows)
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
        )
        st.info("üí° **–°–æ–≤–µ—Ç:** –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º '–ö–∞—Ä—Ç–æ—á–∫–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π")


def handle_modal_signals():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if st.session_state.get("modal_structure_action") and st.session_state.get("modal_structure_smiles"):
        action = st.session_state.modal_structure_action
        smiles = st.session_state.modal_structure_smiles

        if action == "show_3d":
            st.session_state.show_3d_structure = True
            st.session_state.current_smiles = smiles
            st.session_state.current_molecule_name = "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"
        elif action == "show_2d":
            st.session_state.show_molecule_properties = True
            st.session_state.current_smiles = smiles
            st.session_state.current_molecule_name = "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        st.session_state.modal_structure_action = None
        st.session_state.modal_structure_smiles = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —á–µ—Ä–µ–∑ session_state
    # (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —á–µ–º query_params)
    pass  # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã—à–µ


def display_details():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö"""

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    handle_modal_signals()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    dialog_states = [
        st.session_state.get("show_metabolite_details", False),
        st.session_state.get("show_enzyme_details", False),
        st.session_state.get("show_protein_details", False),
        st.session_state.get("show_carbohydrate_details", False),
        st.session_state.get("show_lipid_details", False)
    ]
    
    # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
    if sum(dialog_states) > 1:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
        st.session_state.show_metabolite_details = False
        st.session_state.show_enzyme_details = False
        st.session_state.show_protein_details = False
        st.session_state.show_carbohydrate_details = False
        st.session_state.show_lipid_details = False
        st.session_state.selected_metabolite = None
        st.session_state.selected_enzyme = None
        st.session_state.selected_protein = None
        st.session_state.selected_carbohydrate = None
        st.session_state.selected_lipid = None
        st.rerun()
        return

    # –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã
    if st.session_state.get("show_metabolite_details") and st.session_state.get("selected_metabolite"):
        try:
            show_metabolite_details(st.session_state.selected_metabolite)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞: {e}")
            st.session_state.show_metabolite_details = False
            st.session_state.selected_metabolite = None

    # –§–µ—Ä–º–µ–Ω—Ç—ã
    elif st.session_state.get("show_enzyme_details") and st.session_state.get("selected_enzyme"):
        try:
            show_enzyme_details(st.session_state.selected_enzyme)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–µ—Ä–º–µ–Ω—Ç–∞: {e}")
            st.session_state.show_enzyme_details = False
            st.session_state.selected_enzyme = None

    # –ë–µ–ª–∫–∏
    elif st.session_state.get("show_protein_details") and st.session_state.get("selected_protein"):
        try:
            show_protein_details(st.session_state.selected_protein)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±–µ–ª–∫–∞: {e}")
            st.session_state.show_protein_details = False
            st.session_state.selected_protein = None

    # –£–≥–ª–µ–≤–æ–¥—ã
    elif st.session_state.get("show_carbohydrate_details") and st.session_state.get("selected_carbohydrate"):
        try:
            show_carbohydrate_details(st.session_state.selected_carbohydrate)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É–≥–ª–µ–≤–æ–¥–∞: {e}")
            st.session_state.show_carbohydrate_details = False
            st.session_state.selected_carbohydrate = None

    # –õ–∏–ø–∏–¥—ã
    elif st.session_state.get("show_lipid_details") and st.session_state.get("selected_lipid"):
        try:
            show_lipid_details(st.session_state.selected_lipid)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–∏–ø–∏–¥–∞: {e}")
            st.session_state.show_lipid_details = False
            st.session_state.selected_lipid = None


def handle_close_buttons():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π"""
    close_buttons = render_close_details_buttons()

    if close_buttons.get("close_metabolite"):
        close_all_dialogs()
        st.rerun()

    if close_buttons.get("close_enzyme"):
        close_all_dialogs()
        st.rerun()

    if close_buttons.get("close_protein"):
        close_all_dialogs()
        st.rerun()

    if close_buttons.get("close_carbohydrate"):
        close_all_dialogs()
        st.rerun()

    if close_buttons.get("close_lipid"):
        close_all_dialogs()
        st.rerun()


# -------------------------
# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# -------------------------

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title=UI_CONFIG["page_title"],
        page_icon=UI_CONFIG["page_icon"],
        layout=UI_CONFIG["layout"]
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize_session_state()
    inject_styles()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    vis_deps = check_dependencies()
    if not all(vis_deps.values()):
        st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        with st.expander("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
            for dep, available in vis_deps.items():
                status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if available else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                st.write(f"**{dep}:** {status}")

            if not all(vis_deps.values()):
                st.markdown("### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:")
                st.code(install_instructions(), language="bash")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    try:
        get_database_paths()
    except FileNotFoundError as e:
        st.error(f"‚ùå {str(e)}")
        st.markdown("""
        **–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:**
        ```bash
        python data/create_all_databases.py
        ```
        """)
        st.stop()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title(UI_CONFIG["page_title"])
    st.markdown("**–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º, —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º, –±–µ–ª–∫–∞–º, —É–≥–ª–µ–≤–æ–¥–∞–º –∏ –ª–∏–ø–∏–¥–∞–º**",
                help="–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not render_database_stats():
        st.stop()

    # –ü–æ–∏—Å–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    handle_search_and_display()

    # –î–µ—Ç–∞–ª–∏
    display_details()
    handle_close_buttons()

    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("üß¨ **–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫** - –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤, —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤, –±–µ–ª–∫–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –ª–∏–ø–∏–¥–æ–≤")


if __name__ == "__main__":
    main()
