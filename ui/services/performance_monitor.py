"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import time
import logging
from typing import Dict, Any, List, Optional
from collections import defaultdict
from datetime import datetime, timedelta
import json
from pathlib import Path

logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
PERF_LOG_DIR = Path("ui/logs")
PERF_LOG_DIR.mkdir(parents=True, exist_ok=True)


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.query_stats = defaultdict(list)
        self.request_stats = []
        self.start_time = time.time()

    def log_query(self, db_type: str, query_type: str, duration: float,
                  records_count: int = 0, cache_hit: bool = False) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

        Args:
            db_type: –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (SELECT, COUNT, etc.)
            duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            records_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            cache_hit: –ë—ã–ª–æ –ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à
        """
        stat = {
            'timestamp': datetime.now().isoformat(),
            'db_type': db_type,
            'query_type': query_type,
            'duration': duration,
            'records_count': records_count,
            'cache_hit': cache_hit
        }

        self.query_stats[db_type].append(stat)

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if duration > 1.0:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
            logger.warning(f"Slow query detected: {db_type} {query_type} took {duration:.2f}s")
        elif duration > 0.1:  # –ë–æ–ª–µ–µ 100–º—Å
            logger.info(f"Query performance: {db_type} {query_type} took {duration:.2f}s")

    def log_request(self, endpoint: str, method: str, duration: float,
                   status_code: int = 200) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å

        Args:
            endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
            method: HTTP –º–µ—Ç–æ–¥
            duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            status_code: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞
        """
        stat = {
            'timestamp': datetime.now().isoformat(),
            'endpoint': endpoint,
            'method': method,
            'duration': duration,
            'status_code': status_code
        }

        self.request_stats.append(stat)

    def get_query_stats(self, db_type: Optional[str] = None,
                       hours: int = 24) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤

        Args:
            db_type: –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ)
            hours: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        cutoff_time = datetime.now() - timedelta(hours=hours)

        if db_type:
            stats = self.query_stats.get(db_type, [])
        else:
            stats = []
            for db_stats in self.query_stats.values():
                stats.extend(db_stats)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        recent_stats = [
            stat for stat in stats
            if datetime.fromisoformat(stat['timestamp']) > cutoff_time
        ]

        if not recent_stats:
            return {
                'total_queries': 0,
                'avg_duration': 0,
                'cache_hit_rate': 0,
                'slow_queries': 0
            }

        total_queries = len(recent_stats)
        total_duration = sum(stat['duration'] for stat in recent_stats)
        cache_hits = sum(1 for stat in recent_stats if stat['cache_hit'])
        slow_queries = sum(1 for stat in recent_stats if stat['duration'] > 1.0)

        return {
            'total_queries': total_queries,
            'avg_duration': total_duration / total_queries if total_queries > 0 else 0,
            'cache_hit_rate': cache_hits / total_queries if total_queries > 0 else 0,
            'slow_queries': slow_queries,
            'total_records': sum(stat['records_count'] for stat in recent_stats)
        }

    def get_performance_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        """
        uptime = time.time() - self.start_time

        report = f"""
üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
{'='*40}
‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.1f} —Å–µ–∫—É–Ω–¥ ({uptime/3600:.1f} —á–∞—Å–æ–≤)

üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
"""

        for db_type in self.query_stats.keys():
            stats = self.get_query_stats(db_type, hours=24)
            if stats['total_queries'] > 0:
                report += f"""
üìÅ {db_type.upper()}:
  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}
  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_duration']*1000:.1f} –º—Å
  ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats['cache_hit_rate']*100:.1f}%
  ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['slow_queries']}
  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}
"""

        report += "\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n"
        try:
            from .cache_manager import cache_manager
            cache_stats = cache_manager.get_stats()
            report += f"""  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {cache_stats['total_files']}
  ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö: {cache_stats['valid_files']}
  ‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {cache_stats['expired_files']}
  ‚Ä¢ –†–∞–∑–º–µ—Ä: {cache_stats['total_size_mb']:.2f} MB
"""
        except ImportError:
            report += "  ‚Ä¢ –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        return report

    def save_report(self, filename: Optional[str] = None) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"performance_report_{timestamp}.txt"

        report_path = PERF_LOG_DIR / filename

        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(self.get_performance_report())

            logger.info(f"Performance report saved: {report_path}")
            return str(report_path)

        except Exception as e:
            logger.error(f"Error saving performance report: {e}")
            return ""

    def reset_stats(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.query_stats.clear()
        self.request_stats.clear()
        self.start_time = time.time()
        logger.info("Performance statistics reset")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_monitor = PerformanceMonitor()


def profile_query(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    def wrapper(*args, **kwargs):
        start_time = time.time()

        try:
            result = func(*args, **kwargs)
            duration = time.time() - start_time

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if args and len(args) > 1:
                db_type = args[1] if isinstance(args[1], str) else "unknown"
            else:
                db_type = "unknown"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            query = args[2] if len(args) > 2 else ""
            query_type = query.split()[0].upper() if query else "UNKNOWN"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            records_count = 0
            if isinstance(result, list):
                records_count = len(result)
            elif isinstance(result, int):
                records_count = result

            performance_monitor.log_query(
                db_type=db_type,
                query_type=query_type,
                duration=duration,
                records_count=records_count,
                cache_hit=False  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ cache_manager
            )

            return result

        except Exception as e:
            duration = time.time() - start_time
            logger.error(f"Query profiling error: {e} (duration: {duration:.3f}s)")
            raise

    return wrapper
