"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
"""
import streamlit as st
from typing import Dict, Any, Optional
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
config_dir = Path(__file__).parent.parent / "config"
sys.path.insert(0, str(config_dir))

from config.settings import (
    SEARCH_CONFIG, ORGANISM_TYPES, SEARCH_PRESETS
)
from .utils import validate_search_params


def render_search_form() -> Dict[str, Any]:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    with st.form("unified_search_form"):
        st.subheader("üîç –ü–æ–∏—Å–∫")

        # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≥–ª—é–∫–æ–∑–∞, dehydrogenase, insulin",
            help="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ñ–æ—Ä–º—É–ª–µ, EC –Ω–æ–º–µ—Ä—É, —Ñ—É–Ω–∫—Ü–∏–∏. –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
            key="search_query_input"
        )

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_submitted = st.form_submit_button("üîç –ù–∞–π—Ç–∏", use_container_width=True, type="primary")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
            col1, col2 = st.columns(2)

            with col1:
                mass_query = st.number_input(
                    "–ú–∞—Å—Å–∞ (m/z) –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                    min_value=0.0,
                    step=0.001,
                    format="%.6f",
                    help="–ü–æ–∏—Å–∫ –ø–æ –º–∞—Å—Å–µ —Å—Ä–µ–¥–∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ (Da), —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –∏ –±–µ–ª–∫–æ–≤ (kDa). –û—Å—Ç–∞–≤—å—Ç–µ 0 –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.",
                    key="mass_query_input"
                )

                tolerance_ppm = st.slider(
                    "–î–æ–ø—É—Å–∫ (ppm)",
                    min_value=SEARCH_CONFIG["min_tolerance_ppm"],
                    max_value=SEARCH_CONFIG["max_tolerance_ppm"],
                    value=SEARCH_CONFIG["default_tolerance_ppm"],
                    step=50,
                    help="–ß–∞—Å—Ç–µ–π –Ω–∞ –º–∏–ª–ª–∏–æ–Ω. 250 ppm = ¬±0.025% –æ—Ç –º–∞—Å—Å—ã, 1000 ppm = ¬±0.1% –æ—Ç –º–∞—Å—Å—ã, 10000 ppm = ¬±1% –æ—Ç –º–∞—Å—Å—ã"
                )

            with col2:
                organism_type = st.selectbox(
                    "üå± –¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–º–∞",
                    ORGANISM_TYPES,
                    help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ—Ä–≥–∞–Ω–∏–∑–º–∞"
                )

                page_size = st.selectbox(
                    "–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                    options=[SEARCH_CONFIG["min_page_size"],
                            50,
                            100,
                            SEARCH_CONFIG["max_page_size"]],
                    index=1,  # 50 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                )

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–∏—Å–∫–∞
        st.caption("üí° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞):")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        presets_col1, presets_col2, presets_col3, presets_col4 = st.columns([1, 1, 1, 1])

        preset_buttons = {}

        with presets_col1:
            preset_buttons["glucose"] = st.form_submit_button(
                "–ì–ª—é–∫–æ–∑–∞",
                use_container_width=True
            )

        with presets_col2:
            preset_buttons["dehydrogenase"] = st.form_submit_button(
                "Dehydrogenase",
                use_container_width=True
            )

        with presets_col3:
            preset_buttons["formaldehyde"] = st.form_submit_button(
                "Formaldehyde",
                use_container_width=True
            )

        with presets_col4:
            preset_buttons["atp"] = st.form_submit_button(
                "ATP",
                use_container_width=True
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        active_preset = None
        for preset_name, was_pressed in preset_buttons.items():
            if was_pressed:
                active_preset = preset_name
                break

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        return {
            "search_submitted": search_submitted,
            "search_query": search_query,
            "mass_query": mass_query,
            "tolerance_ppm": tolerance_ppm,
            "organism_type": organism_type,
            "page_size": page_size,
            "active_preset": active_preset
        }


def handle_search_form(form_data: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞"""
    search_submitted = form_data["search_submitted"]
    active_preset = form_data["active_preset"]

    # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if active_preset:
        preset_values = SEARCH_PRESETS[active_preset]
        query = preset_values
        mass = None
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tolerance_ppm –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
        try:
            tolerance_ppm = int(SEARCH_CONFIG["default_tolerance_ppm"])
        except (ValueError, TypeError):
            tolerance_ppm = 1000
        organism_type = "–í—Å–µ"
        page_size = SEARCH_CONFIG["default_page_size"]
        search_submitted = True
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        query = form_data["search_query"]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è mass –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
        try:
            mass_raw = form_data["mass_query"]
            if isinstance(mass_raw, str):
                mass_value = float(mass_raw) if mass_raw.strip() else 0.0
            else:
                mass_value = float(mass_raw) if mass_raw else 0.0
            mass = mass_value if mass_value > 0 else None
        except (ValueError, TypeError):
            mass = None

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tolerance_ppm –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
        try:
            tolerance_ppm = int(form_data["tolerance_ppm"])
        except (ValueError, TypeError):
            tolerance_ppm = SEARCH_CONFIG["default_tolerance_ppm"]

        organism_type = form_data["organism_type"]
        page_size = form_data["page_size"]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    validation = validate_search_params(query, mass, tolerance_ppm)

    if not validation["valid"]:
        st.error("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–∏—Å–∫–∞:")
        for error in validation["errors"]:
            st.error(f"‚Ä¢ {error}")
        return {}

    if validation["warnings"]:
        for warning in validation["warnings"]:
            st.warning(f"‚ö†Ô∏è {warning}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    return {
        "query": query,
        "mass": mass,
        "tolerance_ppm": tolerance_ppm,
        "organism_type": organism_type,
        "page_size": page_size,
        "search_submitted": search_submitted
    }


def render_pagination(current_page: int, total_pages: int, page_size: int,
                     total_items: int) -> Optional[int]:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ None"""
    if total_pages <= 1:
        return None

    st.subheader("üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è")

    col1, col2, col3 = st.columns([1, 2, 1])

    new_page = None

    with col1:
        if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", key="prev_page", disabled=current_page <= 1):
            new_page = max(1, current_page - 1)

    with col2:
        st.markdown(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        start_item = (current_page - 1) * page_size + 1
        end_item = min(current_page * page_size, total_items)
        st.caption(f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {start_item}-{end_item} –∏–∑ {total_items}")

    with col3:
        if st.button("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", key="next_page", disabled=current_page >= total_pages):
            new_page = min(total_pages, current_page + 1)

    return new_page


def render_view_toggle(current_view: str) -> Optional[str]:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ (–ö–∞—Ä—Ç–æ—á–∫–∏/–¢–∞–±–ª–∏—Ü–∞)"""
    view_choice = st.radio(
        "–í–∏–¥",
        options=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"],
        horizontal=True,
        index=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–¢–∞–±–ª–∏—Ü–∞"].index(current_view),
        key="view_radio"
    )

    return view_choice if view_choice != current_view else None


def render_results_header(total_results: int, search_params: Dict[str, Any]) -> None:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if total_results > 0:
        query_text = search_params.get("query", "")
        mass_text = ""
        if search_params.get("mass"):
            mass_text = f" –ø–æ –º–∞—Å—Å–µ {search_params['mass']} Da"

        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" +
                  (f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}'" if query_text else "") +
                  mass_text)
    else:
        st.warning("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")


def render_close_details_buttons() -> Dict[str, bool]:
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π"""
    buttons_pressed = {}

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞
    if st.session_state.get("show_metabolite_details"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            buttons_pressed["close_metabolite"] = st.button(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏",
                key="close_met_details",
                use_container_width=True
            )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–µ—Ä–º–µ–Ω—Ç–∞
    if st.session_state.get("show_enzyme_details"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            buttons_pressed["close_enzyme"] = st.button(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏",
                key="close_enz_details",
                use_container_width=True
            )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –±–µ–ª–∫–∞
    if st.session_state.get("show_protein_details"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            buttons_pressed["close_protein"] = st.button(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏",
                key="close_prot_details",
                use_container_width=True
            )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π —É–≥–ª–µ–≤–æ–¥–∞
    if st.session_state.get("show_carbohydrate_details"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            buttons_pressed["close_carbohydrate"] = st.button(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏",
                key="close_carb_details",
                use_container_width=True
            )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–∏–ø–∏–¥–∞
    if st.session_state.get("show_lipid_details"):
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            buttons_pressed["close_lipid"] = st.button(
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏",
                key="close_lip_details",
                use_container_width=True
            )

    return buttons_pressed
