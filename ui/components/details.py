"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–Ω–æ—Å—Ç—è—Ö
"""
import streamlit as st
from typing import Dict, Any, Optional
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
EXTERNAL_LINKS = {
    "hmdb_base": "https://hmdb.ca/metabolites/",
    "kegg_base": "https://www.kegg.jp/entry/",
    "chebi_base": "https://www.ebi.ac.uk/chebi/searchId.do?chebiId=",
    "pubchem_base": "https://pubchem.ncbi.nlm.nih.gov/compound/",
    "uniprot_base": "https://www.uniprot.org/uniprot/",
    "pdb_base": "https://www.rcsb.org/structure/",
    "ncbi_gene_base": "https://www.ncbi.nlm.nih.gov/gene/?term=",
    "expasy_base": "https://enzyme.expasy.org/EC/",
}
# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
try:
    # Try absolute import first
    from components.utils import (
        get_display_name, safe_get_value, format_mass, format_chemical_formula,
        create_external_links, create_metric_html
    )
except ImportError:
    # Fallback to relative import
    try:
        from .utils import (
            get_display_name, safe_get_value, format_mass, format_chemical_formula,
            create_external_links, create_metric_html
        )
    except ImportError:
        from utils import (
            get_display_name, safe_get_value, format_mass, format_chemical_formula,
            create_external_links, create_metric_html
        )

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
modal_styles = """
<style>
/* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */
.stDialog > div > div > div {
    border-radius: 16px !important;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.25) !important;
    border: 1px solid rgba(255, 255, 255, 0.15) !important;
    background: linear-gradient(145deg, rgba(255, 255, 255, 0.97) 0%, rgba(250, 250, 255, 0.97) 100%) !important;
    backdrop-filter: blur(15px) !important;
    max-width: min(90vw, 900px) !important;
    max-height: 85vh !important;
    overflow-y: auto !important;
    overflow-x: hidden !important;
}

.stDialog > div > div > div > div > div {
    background: transparent !important;
    padding: 1rem !important;
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
.stButton > button {
    border-radius: 10px !important;
    font-weight: 600 !important;
    font-size: 13px !important;
    padding: 10px 20px !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.12) !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    color: white !important;
    letter-spacing: 0.3px !important;
    min-height: 38px !important;
}

.stButton > button:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.18) !important;
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%) !important;
    border-color: rgba(255, 255, 255, 0.3) !important;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã */
.metabolite-theme {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    color: white !important;
    border-radius: 12px !important;
    padding: 1.5rem !important;
    margin: -1rem -1rem 1.5rem -1rem !important;
    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.25) !important;
    position: relative;
    overflow: hidden;
}

.metabolite-theme::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    z-index: -1;
}

.enzyme-theme {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%) !important;
    color: white !important;
    border-radius: 12px !important;
    padding: 1.5rem !important;
    margin: -1rem -1rem 1.5rem -1rem !important;
    box-shadow: 0 8px 30px rgba(240, 147, 251, 0.25) !important;
    position: relative;
    overflow: hidden;
}

.enzyme-theme::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    z-index: -1;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ —Ñ–æ–Ω–∞–º–∏ */
.info-card {
    background: linear-gradient(135deg, #e3f2fd 0%, #f0f4ff 100%) !important;
    padding: 1.2rem !important;
    border-radius: 10px !important;
    border-left: 3px solid #2196f3 !important;
    margin-bottom: 1rem !important;
    box-shadow: 0 3px 12px rgba(33, 150, 243, 0.08) !important;
    transition: transform 0.2s ease, box-shadow 0.2s ease !important;
}

.info-card:hover {
    box-shadow: 0 6px 20px rgba(33, 150, 243, 0.15) !important;
}

.properties-card {
    background: linear-gradient(135deg, #f3e5f5 0%, #faf4ff 100%) !important;
    padding: 1.2rem !important;
    border-radius: 10px !important;
    border-left: 3px solid #9c27b0 !important;
    margin-bottom: 1rem !important;
    box-shadow: 0 3px 12px rgba(156, 39, 176, 0.08) !important;
    transition: transform 0.2s ease, box-shadow 0.2s ease !important;
}

.properties-card:hover {
    box-shadow: 0 6px 20px rgba(156, 39, 176, 0.15) !important;
}

.structure-card {
    background: linear-gradient(135deg, #e8f5e8 0%, #f4fdf4 100%) !important;
    padding: 1.2rem !important;
    border-radius: 10px !important;
    text-align: center !important;
    border: 2px dashed rgba(76, 175, 80, 0.4) !important;
    margin-bottom: 1rem !important;
    transition: border-color 0.2s ease !important;
}

.structure-card:hover {
    border-color: rgba(76, 175, 80, 0.7) !important;
}

.description-card {
    background: linear-gradient(135deg, #fce4ec 0%, #fef7f7 100%) !important;
    padding: 1.2rem !important;
    border-radius: 10px !important;
    border-left: 3px solid #e91e63 !important;
    box-shadow: 0 3px 12px rgba(233, 30, 99, 0.08) !important;
    transition: transform 0.2s ease, box-shadow 0.2s ease !important;
}

.description-card:hover {
    box-shadow: 0 6px 20px rgba(233, 30, 99, 0.15) !important;
}

/* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */
@media (max-width: 768px) {
    .stDialog > div > div > div {
        max-width: 95vw !important;
        max-height: 90vh !important;
        border-radius: 12px !important;
        margin: 1rem !important;
    }
    
    .metabolite-theme, .enzyme-theme {
        padding: 1rem !important;
        margin: -0.5rem -0.5rem 1rem -0.5rem !important;
        border-radius: 8px !important;
    }
    
    .info-card, .properties-card, .description-card {
        padding: 1rem !important;
        border-radius: 8px !important;
        margin-bottom: 0.75rem !important;
    }
    
    .structure-card {
        padding: 1rem !important;
        border-radius: 8px !important;
    }
    
    .stButton > button {
        font-size: 12px !important;
        padding: 8px 16px !important;
        min-height: 36px !important;
    }
}
</style>
"""

st.markdown(modal_styles, unsafe_allow_html=True)


@st.dialog("üß¨ –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞")
def show_metabolite_details(metabolite: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–∞–±–æ–ª–∏—Ç–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞
    display_name = get_display_name(metabolite, "–ú–µ—Ç–∞–±–æ–ª–∏—Ç")
    formula = format_chemical_formula(safe_get_value(metabolite, "formula", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
    mass = safe_get_value(metabolite, 'exact_mass')
    mass_str = format_mass(mass, "Da")

    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
    st.markdown('<div class="metabolite-theme">', unsafe_allow_html=True)
    st.markdown(f"# üß¨ {display_name}")
    st.markdown(f"**‚öóÔ∏è –§–æ—Ä–º—É–ª–∞:** {formula} | **‚öñÔ∏è –ú–∞—Å—Å–∞:** {mass_str}", unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown('<div class="info-card">', unsafe_allow_html=True)
        st.markdown(f"**üá∫üá∏ –ù–∞–∑–≤–∞–Ω–∏–µ (EN):** {safe_get_value(metabolite, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown(f"**üá∑üá∫ –ù–∞–∑–≤–∞–Ω–∏–µ (RU):** {safe_get_value(metabolite, 'name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown(f"**üè∑Ô∏è –ö–ª–∞—Å—Å:** {safe_get_value(metabolite, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown("### ‚öñÔ∏è –§–∏–∑–∏–∫–æ-—Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞")
        st.markdown('<div class="properties-card">', unsafe_allow_html=True)
        st.markdown(f"**‚öóÔ∏è –•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞:** {formula}", unsafe_allow_html=True)
        st.markdown(f"**üèãÔ∏è –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞:** {mass_str}")

        # –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        hmdb_id = safe_get_value(metabolite, 'hmdb_id')
        kegg_id = safe_get_value(metabolite, 'kegg_id')
        chebi_id = safe_get_value(metabolite, 'chebi_id')
        pubchem_id = safe_get_value(metabolite, 'pubchem_cid')

        if any([hmdb_id, kegg_id, chebi_id, pubchem_id]):
            st.markdown("### üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
            links = []
            if hmdb_id:
                links.append(f"üîó [HMDB]({EXTERNAL_LINKS['hmdb_base']}{hmdb_id})")
            if kegg_id:
                links.append(f"üîó [KEGG]({EXTERNAL_LINKS['kegg_base']}{kegg_id})")
            if chebi_id:
                links.append(f"üîó [ChEBI]({EXTERNAL_LINKS['chebi_base']}{chebi_id})")
            if pubchem_id:
                links.append(f"üîó [PubChem]({EXTERNAL_LINKS['pubchem_base']}{pubchem_id})")
            st.markdown(" | ".join(links))

        st.markdown('</div>', unsafe_allow_html=True)

    # 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å —Ç–∞–±–∞
    smiles = safe_get_value(metabolite, 'smiles') or safe_get_value(metabolite, 'smiles_string')
    if smiles and smiles != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üß¨ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        tab1, tab2 = st.tabs(["üß¨ 3D –°—Ç—Ä—É–∫—Ç—É—Ä–∞", "üñºÔ∏è 2D –°—Ç—Ä—É–∫—Ç—É—Ä–∞"])

        with tab1:

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            try:
                from .visualization_3d import render_3d_structure
                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
                modal_width = min(400, 350)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
                modal_height = min(300, 250)  # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                render_3d_structure(smiles, f"3D —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {display_name}", 
                                  width=modal_width, height=modal_height)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)[:100]}...") 
                st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SMILES —Å—Ç—Ä–æ–∫—É")
                st.code(smiles, language="text")



        with tab2:

            st.markdown("*–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤*")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–≤–æ–π—Å—Ç–≤–∞
            try:
                from .visualization_3d import render_2d_structure
                render_2d_structure(smiles, f"2D —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {display_name}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)[:100]}...")
                st.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMILES —Å—Ç—Ä–æ–∫—É")
                st.code(smiles, language="text")

    else:
        st.info("üí° –î–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (SMILES)")

    # –û–ø–∏—Å–∞–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    description = safe_get_value(metabolite, 'description')
    if description and description != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–æ–ª—å")
        st.markdown('<div class="description-card">', unsafe_allow_html=True)
        st.info(description)
        st.markdown('</div>', unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key="copy_metabolite_modal", width='stretch'):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data_to_copy = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}
–§–æ—Ä–º—É–ª–∞: {formula}
–ú–∞—Å—Å–∞: {mass_str}
–ö–ª–∞—Å—Å: {safe_get_value(metabolite, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            st.session_state.copied_data = data_to_copy
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key="refresh_metabolite_modal", width='stretch'):
            st.rerun()

    with col3:
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_metabolite_modal", type="primary"):
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            st.session_state.show_metabolite_details = False
            st.session_state.show_enzyme_details = False
            st.session_state.show_protein_details = False
            st.session_state.show_carbohydrate_details = False
            st.session_state.show_lipid_details = False


@st.dialog("üß¨ –î–µ—Ç–∞–ª–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–∞")
def show_enzyme_details(enzyme: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ–Ω—Ç–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞
    display_name = get_display_name(enzyme, "–§–µ—Ä–º–µ–Ω—Ç")
    ec_number = safe_get_value(enzyme, 'ec_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    systematic_name = safe_get_value(enzyme, 'systematic_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º –¥–ª—è —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
    st.markdown('<div class="enzyme-theme">', unsafe_allow_html=True)
    st.markdown(f"# üß¨ {display_name}")
    st.markdown(f"**üî¢ EC –Ω–æ–º–µ—Ä:** {ec_number} | **‚öóÔ∏è –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {systematic_name[:50]}...")
    st.markdown('</div>', unsafe_allow_html=True)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown('<div class="info-card">', unsafe_allow_html=True)
        st.markdown(f"**üá∫üá∏ –ù–∞–∑–≤–∞–Ω–∏–µ (EN):** {safe_get_value(enzyme, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown(f"**üá∑üá∫ –ù–∞–∑–≤–∞–Ω–∏–µ (RU):** {safe_get_value(enzyme, 'name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown(f"**üî¢ EC –Ω–æ–º–µ—Ä:** {ec_number}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown("### üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        st.markdown('<div class="properties-card">', unsafe_allow_html=True)
        st.markdown(f"**üè∑Ô∏è –ö–ª–∞—Å—Å:** {safe_get_value(enzyme, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        st.markdown(f"**‚ö° –¢–∏–ø —Ä–µ–∞–∫—Ü–∏–∏:** {safe_get_value(enzyme, 'reaction_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

        # –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        brenda_id = safe_get_value(enzyme, 'brenda_id')
        kegg_id = safe_get_value(enzyme, 'kegg_id')
        uniprot_id = safe_get_value(enzyme, 'uniprot_id')

        if any([brenda_id, kegg_id, uniprot_id]):
            st.markdown("### üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
            links = []
            if brenda_id:
                links.append(f"üîó [BRENDA](https://www.brenda-enzymes.org/enzyme.php?ecno={brenda_id})")
            if kegg_id:
                links.append(f"üîó [KEGG]({EXTERNAL_LINKS['kegg_base']}{kegg_id})")
            if uniprot_id:
                links.append(f"üîó [UniProt](https://www.uniprot.org/uniprotkb/{uniprot_id})")
            st.markdown(" | ".join(links))

        st.markdown('</div>', unsafe_allow_html=True)

    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = safe_get_value(enzyme, 'description')
    if description and description != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è")
        st.markdown('<div class="description-card">', unsafe_allow_html=True)
        st.info(description)
        st.markdown('</div>', unsafe_allow_html=True)


    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key="copy_enzyme_modal", width='stretch'):
            data_to_copy = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}
EC –Ω–æ–º–µ—Ä: {ec_number}
–ö–ª–∞—Å—Å: {safe_get_value(enzyme, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            st.session_state.copied_data = data_to_copy
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key="refresh_enzyme_modal", width='stretch'):
            st.rerun()

    with col3:
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_enzyme_modal", type="primary"):
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            st.session_state.show_metabolite_details = False
            st.session_state.show_enzyme_details = False
            st.session_state.show_protein_details = False
            st.session_state.show_carbohydrate_details = False
            st.session_state.show_lipid_details = False


@st.dialog("üß¨ –î–µ—Ç–∞–ª–∏ –±–µ–ª–∫–∞")
def show_protein_details(protein: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–ª–∫–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º st.dialog()"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–ª–∫–∞
    display_name = get_display_name(protein, "–ë–µ–ª–æ–∫")
    sequence = safe_get_value(protein, 'sequence', '')
    length = len(sequence) if sequence else 0

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    st.markdown(f"## üß¨ {display_name}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with st.container():
            st.info(f"""
            **–ù–∞–∑–≤–∞–Ω–∏–µ (EN):** {safe_get_value(protein, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–ù–∞–∑–≤–∞–Ω–∏–µ (RU):** {safe_get_value(protein, 'name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {length} –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç

            **–¢–∏–ø:** {safe_get_value(protein, 'protein_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    with col2:
        st.markdown("### üß™ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        with st.container():
            st.success(f"""
            **UniProt ID:** {safe_get_value(protein, 'uniprot_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–§—É–Ω–∫—Ü–∏—è:** {safe_get_value(protein, 'function', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è)
    if sequence and length <= 500:
        st.markdown("### üß¨ –ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        st.code(sequence, language="text")

    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = safe_get_value(protein, 'description')
    if description and description != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üìù –û–ø–∏—Å–∞–Ω–∏–µ")
        st.info(description)


    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key="copy_protein_modal", width='stretch'):
            data_to_copy = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}
–§—É–Ω–∫—Ü–∏—è: {safe_get_value(protein, 'function', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–∏–ø: {safe_get_value(protein, 'protein_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            st.session_state.copied_data = data_to_copy
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key="refresh_protein_modal", width='stretch'):
            st.rerun()

    with col3:
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_protein_modal", type="primary"):
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            st.session_state.show_metabolite_details = False
            st.session_state.show_enzyme_details = False
            st.session_state.show_protein_details = False
            st.session_state.show_carbohydrate_details = False
            st.session_state.show_lipid_details = False


@st.dialog("üß¨ –î–µ—Ç–∞–ª–∏ —É–≥–ª–µ–≤–æ–¥–∞")
def show_carbohydrate_details(carbohydrate: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≥–ª–µ–≤–æ–¥–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º st.dialog()"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥–∞
    display_name = get_display_name(carbohydrate, "–£–≥–ª–µ–≤–æ–¥")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    st.markdown(f"## üß¨ {display_name}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with st.container():
            st.info(f"""
            **–ù–∞–∑–≤–∞–Ω–∏–µ (EN):** {safe_get_value(carbohydrate, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–ù–∞–∑–≤–∞–Ω–∏–µ (RU):** {safe_get_value(carbohydrate, 'name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–§–æ—Ä–º—É–ª–∞:** {safe_get_value(carbohydrate, 'formula', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–¢–∏–ø:** {safe_get_value(carbohydrate, 'carbohydrate_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    with col2:
        st.markdown("### ‚öñÔ∏è –°–≤–æ–π—Å—Ç–≤–∞")
        with st.container():
            st.success(f"""
            **–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞:** {safe_get_value(carbohydrate, 'molecular_weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–ö–ª–∞—Å—Å:** {safe_get_value(carbohydrate, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = safe_get_value(carbohydrate, 'description')
    if description and description != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üìù –û–ø–∏—Å–∞–Ω–∏–µ")
        st.info(description)

    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key="copy_carbohydrate_modal", width='stretch'):
            data_to_copy = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}
–§–æ—Ä–º—É–ª–∞: {safe_get_value(carbohydrate, 'formula', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–∏–ø: {safe_get_value(carbohydrate, 'carbohydrate_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            st.session_state.copied_data = data_to_copy
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key="refresh_carbohydrate_modal", width='stretch'):
            st.rerun()

    with col3:
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_carbohydrate_modal", type="primary", width='stretch'):
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            st.session_state.show_metabolite_details = False
            st.session_state.show_enzyme_details = False
            st.session_state.show_protein_details = False
            st.session_state.show_carbohydrate_details = False
            st.session_state.show_lipid_details = False


@st.dialog("üß¨ –î–µ—Ç–∞–ª–∏ –ª–∏–ø–∏–¥–∞")
def show_lipid_details(lipid: Dict[str, Any]) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–ø–∏–¥–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º st.dialog()"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–ø–∏–¥–∞
    display_name = get_display_name(lipid, "–õ–∏–ø–∏–¥")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    st.markdown(f"## üß¨ {display_name}")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        with st.container():
            st.info(f"""
            **–ù–∞–∑–≤–∞–Ω–∏–µ (EN):** {safe_get_value(lipid, 'name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–ù–∞–∑–≤–∞–Ω–∏–µ (RU):** {safe_get_value(lipid, 'name_ru', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–§–æ—Ä–º—É–ª–∞:** {safe_get_value(lipid, 'formula', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–¢–∏–ø:** {safe_get_value(lipid, 'lipid_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    with col2:
        st.markdown("### ‚öñÔ∏è –°–≤–æ–π—Å—Ç–≤–∞")
        with st.container():
            st.success(f"""
            **–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞:** {safe_get_value(lipid, 'molecular_weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

            **–ö–ª–∞—Å—Å:** {safe_get_value(lipid, 'class_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """)

    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = safe_get_value(lipid, 'description')
    if description and description != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        st.markdown("### üìù –û–ø–∏—Å–∞–Ω–∏–µ")
        st.info(description)


    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key="copy_lipid_modal", width='stretch'):
            data_to_copy = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ: {display_name}
–§–æ—Ä–º—É–ª–∞: {safe_get_value(lipid, 'formula', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–∏–ø: {safe_get_value(lipid, 'lipid_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            st.session_state.copied_data = data_to_copy
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

    with col2:
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å", key="refresh_lipid_modal", width='stretch'):
            st.rerun()

    with col3:
        if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", key="close_lipid_modal", type="primary", width='stretch'):
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            st.session_state.show_metabolite_details = False
            st.session_state.show_enzyme_details = False
            st.session_state.show_protein_details = False
            st.session_state.show_carbohydrate_details = False
            st.session_state.show_lipid_details = False
