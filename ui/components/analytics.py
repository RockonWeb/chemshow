"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–∞—à–±–æ—Ä–¥–æ–≤
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å KPI –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
"""
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime
import sqlite3
import os

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
try:
    # Try absolute import first
    from components.utils import get_display_name, safe_get_value, format_mass
except ImportError:
    # Fallback to relative import
    try:
        from .utils import get_display_name, safe_get_value, format_mass
    except ImportError:
        from utils import get_display_name, safe_get_value, format_mass


class AnalyticsDashboard:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤"""

    def __init__(self):
        self.database_paths = {}

    def load_database_stats(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # Try absolute import first
            from config.settings import DATABASE_PATHS
        except ImportError:
            # Fallback to relative import
            from ..config.settings import DATABASE_PATHS

            stats = {
                "total_compounds": 0,
                "compounds_by_type": {},
                "mass_distribution": {"ranges": [], "counts": []},
                "organism_distribution": {},
                "class_distribution": {},
                "database_info": {}
            }

            for db_type, db_path in DATABASE_PATHS.items():
                if os.path.exists(db_path):
                    try:
                        conn = sqlite3.connect(db_path)
                        cursor = conn.cursor()

                        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                        cursor.execute(f"SELECT COUNT(*) FROM {db_type}")
                        count = cursor.fetchone()[0]
                        stats["compounds_by_type"][db_type] = count
                        stats["total_compounds"] += count

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Å–∞–º
                        if db_type in ['metabolites', 'carbohydrates', 'lipids']:
                            cursor.execute(f"SELECT exact_mass FROM {db_type} WHERE exact_mass IS NOT NULL")
                            masses = [row[0] for row in cursor.fetchall()]

                            if masses:
                                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –º–∞—Å—Å
                                ranges = [(0, 100), (100, 500), (500, 1000), (1000, 5000), (5000, 10000)]
                                for min_mass, max_mass in ranges:
                                    range_count = len([m for m in masses if min_mass <= m < max_mass])
                                    range_key = f"{min_mass}-{max_mass} Da"
                                    if range_key not in stats["mass_distribution"]["ranges"]:
                                        stats["mass_distribution"]["ranges"].append(range_key)
                                        stats["mass_distribution"]["counts"].append(0)
                                    range_idx = stats["mass_distribution"]["ranges"].index(range_key)
                                    stats["mass_distribution"]["counts"][range_idx] += range_count

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º
                        if 'organism' in self._get_table_columns(cursor, db_type):
                            cursor.execute(f"SELECT organism, COUNT(*) FROM {db_type} WHERE organism IS NOT NULL GROUP BY organism ORDER BY COUNT(*) DESC LIMIT 10")
                            organism_data = cursor.fetchall()
                            for org, count in organism_data:
                                if org not in stats["organism_distribution"]:
                                    stats["organism_distribution"][org] = 0
                                stats["organism_distribution"][org] += count

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º (–¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤)
                        if db_type == 'metabolites' and 'class_name' in self._get_table_columns(cursor, db_type):
                            cursor.execute("SELECT class_name, COUNT(*) FROM metabolites WHERE class_name IS NOT NULL GROUP BY class_name ORDER BY COUNT(*) DESC LIMIT 10")
                            class_data = cursor.fetchall()
                            for class_name, count in class_data:
                                stats["class_distribution"][class_name] = count

                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        stats["database_info"][db_type] = {
                            "path": db_path,
                            "size_mb": round(os.path.getsize(db_path) / (1024 * 1024), 2),
                            "last_modified": datetime.fromtimestamp(os.path.getmtime(db_path)).strftime("%Y-%m-%d %H:%M")
                        }

                        conn.close()

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {db_type}: {e}")
                        stats["database_info"][db_type] = {"error": str(e)}

            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}

    def _get_table_columns(self, cursor, table_name: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            cursor.execute(f"PRAGMA table_info({table_name})")
            return [row[1] for row in cursor.fetchall()]
        except:
            return []

    def create_overview_kpi(self, stats: Dict[str, Any]) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–∏—Ö KPI –º–µ—Ç—Ä–∏–∫"""
        if "error" in stats:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            return

        st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric(
                "–í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                f"{stats.get('total_compounds', 0):,}",
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"
            )

        with col2:
            db_count = len([db for db in stats.get("database_info", {}) if "error" not in stats["database_info"][db]])
            st.metric(
                "–ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
                db_count,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
            )

        with col3:
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            total_size = sum([db_info.get("size_mb", 0) for db_info in stats.get("database_info", {}).values() if isinstance(db_info, dict) and "size_mb" in db_info])
            st.metric(
                "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä",
                f"{total_size:.1f} MB",
                help="–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
            )

        with col4:
            avg_mass_range = "‚Äî"
            if stats.get("mass_distribution", {}).get("counts"):
                total_with_mass = sum(stats["mass_distribution"]["counts"])
                if total_with_mass > 0:
                    avg_mass_range = f"{total_with_mass:,}"
            st.metric(
                "–° –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Å—Å",
                avg_mass_range,
                help="–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π –º–∞—Å—Å–µ"
            )

    def create_compounds_distribution_chart(self, stats: Dict[str, Any]) -> Optional[go.Figure]:
        """–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º"""
        compounds_by_type = stats.get("compounds_by_type", {})

        if not compounds_by_type:
            return None

        compound_types = {
            "metabolites": "üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã",
            "enzymes": "üß™ –§–µ—Ä–º–µ–Ω—Ç—ã",
            "proteins": "üî¨ –ë–µ–ª–∫–∏",
            "carbohydrates": "üåæ –£–≥–ª–µ–≤–æ–¥—ã",
            "lipids": "ü´ß –õ–∏–ø–∏–¥—ã"
        }

        labels = []
        values = []
        colors = []

        color_map = {
            "metabolites": "#1f77b4",
            "enzymes": "#ff7f0e",
            "proteins": "#2ca02c",
            "carbohydrates": "#d62728",
            "lipids": "#9467bd"
        }

        for db_type, count in compounds_by_type.items():
            labels.append(compound_types.get(db_type, db_type))
            values.append(count)
            colors.append(color_map.get(db_type, "#7f7f7f"))

        fig = go.Figure(data=[
            go.Pie(
                labels=labels,
                values=values,
                marker_colors=colors,
                textinfo='label+percent',
                textposition='inside',
                hovertemplate='<b>%{label}</b><br>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}<br>–î–æ–ª—è: %{percent}<extra></extra>'
            )
        ])

        fig.update_layout(
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º",
            showlegend=False,
            height=400
        )

        return fig

    def create_mass_distribution_chart(self, stats: Dict[str, Any]) -> Optional[go.Figure]:
        """–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–º –º–∞—Å—Å–∞–º"""
        mass_dist = stats.get("mass_distribution", {})

        if not mass_dist.get("ranges") or not mass_dist.get("counts"):
            return None

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        filtered_data = [(r, c) for r, c in zip(mass_dist["ranges"], mass_dist["counts"]) if c > 0]

        if not filtered_data:
            return None

        ranges, counts = zip(*filtered_data)

        fig = go.Figure(data=[
            go.Bar(
                x=ranges,
                y=counts,
                marker_color='#1f77b4',
                text=counts,
                textposition='auto',
                hovertemplate='<b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> %{x}<br><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> %{y}<extra></extra>'
            )
        ])

        fig.update_layout(
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π –º–∞—Å—Å–µ",
            xaxis_title="–î–∏–∞–ø–∞–∑–æ–Ω –º–∞—Å—Å—ã (Da)",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
            height=400
        )

        return fig

    def create_organism_distribution_chart(self, stats: Dict[str, Any]) -> Optional[go.Figure]:
        """–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º"""
        org_dist = stats.get("organism_distribution", {})

        if not org_dist:
            return None

        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
        sorted_orgs = sorted(org_dist.items(), key=lambda x: x[1], reverse=True)[:10]
        organisms, counts = zip(*sorted_orgs)

        fig = go.Figure(data=[
            go.Bar(
                x=organisms,
                y=counts,
                marker_color='#2ca02c',
                text=counts,
                textposition='auto',
                hovertemplate='<b>–û—Ä–≥–∞–Ω–∏–∑–º:</b> %{x}<br><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> %{y}<extra></extra>'
            )
        ])

        fig.update_layout(
            title="–¢–æ–ø-10 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
            xaxis_title="–û—Ä–≥–∞–Ω–∏–∑–º",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
            height=400,
            xaxis_tickangle=-45
        )

        return fig

    def create_class_distribution_chart(self, stats: Dict[str, Any]) -> Optional[go.Figure]:
        """–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        class_dist = stats.get("class_distribution", {})

        if not class_dist:
            return None

        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –∫–ª–∞—Å—Å–æ–≤
        sorted_classes = sorted(class_dist.items(), key=lambda x: x[1], reverse=True)[:10]
        classes, counts = zip(*sorted_classes)

        fig = go.Figure(data=[
            go.Bar(
                x=classes,
                y=counts,
                marker_color='#ff7f0e',
                text=counts,
                textposition='auto',
                hovertemplate='<b>–ö–ª–∞—Å—Å:</b> %{x}<br><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> %{y}<extra></extra>'
            )
        ])

        fig.update_layout(
            title="–¢–æ–ø-10 –∫–ª–∞—Å—Å–æ–≤ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤",
            xaxis_title="–ö–ª–∞—Å—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            height=400,
            xaxis_tickangle=-45
        )

        return fig

    def create_database_info_table(self, stats: Dict[str, Any]) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
        db_info = stats.get("database_info", {})

        if not db_info:
            return pd.DataFrame()

        table_data = []
        for db_type, info in db_info.items():
            if isinstance(info, dict) and "error" not in info:
                table_data.append({
                    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": db_type.title(),
                    "–†–∞–∑–º–µ—Ä (MB)": info.get("size_mb", "‚Äî"),
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": info.get("last_modified", "‚Äî"),
                    "–°—Ç–∞—Ç—É—Å": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
                })
            else:
                table_data.append({
                    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": db_type.title(),
                    "–†–∞–∑–º–µ—Ä (MB)": "‚Äî",
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": "‚Äî",
                    "–°—Ç–∞—Ç—É—Å": "‚ùå –û—à–∏–±–∫–∞"
                })

        return pd.DataFrame(table_data)


def render_analytics_dashboard():
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    dashboard = AnalyticsDashboard()

    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", width='stretch'):
            st.cache_data.clear()
            st.rerun()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    @st.cache_data(ttl=3600)  # –ö–µ—à –Ω–∞ 1 —á–∞—Å
    def load_stats():
        return dashboard.load_database_stats()

    with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."):
        stats = load_stats()

    # KPI –º–µ—Ç—Ä–∏–∫–∏
    dashboard.create_overview_kpi(stats)

    st.divider()

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "‚öñÔ∏è –ú–∞—Å—Å—ã", "ü¶† –û—Ä–≥–∞–Ω–∏–∑–º—ã", "üè∑Ô∏è –ö–ª–∞—Å—Å—ã"])

    with tab1:
        chart = dashboard.create_compounds_distribution_chart(stats)
        if chart:
            st.plotly_chart(chart, width='stretch')
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    with tab2:
        chart = dashboard.create_mass_distribution_chart(stats)
        if chart:
            st.plotly_chart(chart, width='stretch')
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    with tab3:
        chart = dashboard.create_organism_distribution_chart(stats)
        if chart:
            st.plotly_chart(chart, width='stretch')
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–º–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    with tab4:
        chart = dashboard.create_class_distribution_chart(stats)
        if chart:
            st.plotly_chart(chart, width='stretch')
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∞—Å—Å–∞—Ö –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö")

    db_table = dashboard.create_database_info_table(stats)
    if not db_table.empty:
        st.dataframe(
            db_table,
            width='stretch',
            hide_index=True,
            column_config={
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": st.column_config.TextColumn(width="medium"),
                "–†–∞–∑–º–µ—Ä (MB)": st.column_config.NumberColumn(width="small", format="%.2f"),
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": st.column_config.TextColumn(width="medium"),
                "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn(width="small")
            }
        )

        # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        col1, col2 = st.columns(2)

        with col1:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_data = db_table.to_csv(index=False)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (CSV)",
                data=csv_data,
                file_name="database_statistics.csv",
                mime="text/csv",
                width='stretch'
            )

        with col2:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            import json
            json_data = json.dumps(stats, indent=2, ensure_ascii=False, default=str)
            st.download_button(
                label="üìã –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (JSON)",
                data=json_data,
                file_name="database_statistics.json",
                mime="application/json",
                width='stretch'
            )
    else:
        st.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("‚ÑπÔ∏è –û –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"):
        st.markdown("""
        **üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:

        - **–û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —Ä–∞–∑–º–µ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        - **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º**: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤, —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤, –±–µ–ª–∫–æ–≤ –∏ —Ç.–¥.
        - **–ê–Ω–∞–ª–∏–∑ –º–∞—Å—Å**: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å
        - **–û—Ä–≥–∞–Ω–∏–∑–º—ã**: —Ç–æ–ø-10 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        - **–ö–ª–∞—Å—Å—ã**: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ –ø–æ —Ö–∏–º–∏—á–µ—Å–∫–∏–º –∫–ª–∞—Å—Å–∞–º

        **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 1 —á–∞—Å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """)
