"""
3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Py3Dmol –∏ rdkit
"""
import streamlit as st
import streamlit.components.v1 as components
import logging
from typing import Optional, Dict, Any
from pathlib import Path
import hashlib
import os
import py3Dmol
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ rdkit
try:
    from rdkit import Chem
    from rdkit.Chem import AllChem, Draw
    RDKIT_AVAILABLE = True
except ImportError:
    logger.warning("rdkit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
    RDKIT_AVAILABLE = False
    Chem = None
    AllChem = None

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Py3Dmol
try:
    import py3Dmol
    PY3DMOL_AVAILABLE = True
except ImportError:
    logger.warning("Py3Dmol –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    PY3DMOL_AVAILABLE = False
    py3Dmol = None


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ rdkit
try:
    from rdkit import Chem
    from rdkit.Chem import AllChem, Draw
    RDKIT_AVAILABLE = True
except ImportError:
    logger.warning("rdkit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
    RDKIT_AVAILABLE = False
    Chem = None
    AllChem = None

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Py3Dmol
try:
    import py3Dmol
    PY3DMOL_AVAILABLE = True
except ImportError:
    logger.warning("Py3Dmol –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    PY3DMOL_AVAILABLE = False
    py3Dmol = None

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
CACHE_DIR = Path("ui/cache/structures")
CACHE_DIR.mkdir(parents=True, exist_ok=True)


def generate_mol_hash(smiles: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–ª–µ–∫—É–ª—ã"""
    return hashlib.md5(smiles.encode()).hexdigest()


def cache_structure_file(smiles: str, pdb_data: str) -> str:
    """–ö—ç—à–∏—Ä—É–µ—Ç PDB –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    mol_hash = generate_mol_hash(smiles)
    cache_file = CACHE_DIR / f"{mol_hash}.pdb"

    with open(cache_file, 'w') as f:
        f.write(pdb_data)

    return str(cache_file)


def load_cached_structure(smiles: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    mol_hash = generate_mol_hash(smiles)
    cache_file = CACHE_DIR / f"{mol_hash}.pdb"

    if cache_file.exists():
        with open(cache_file, 'r') as f:
            return f.read()

    return None


def smiles_to_3d(smiles: str) -> Optional[str]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SMILES –≤ 3D PDB —Å—Ç—Ä—É–∫—Ç—É—Ä—É

    Args:
        smiles: SMILES —Å—Ç—Ä–æ–∫–∞ –º–æ–ª–µ–∫—É–ª—ã

    Returns:
        PDB —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not RDKIT_AVAILABLE:
        logger.error("rdkit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D —Å—Ç—Ä—É–∫—Ç—É—Ä")
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        cached = load_cached_structure(smiles)
        if cached:
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è {smiles}")
            return cached

        # –°–æ–∑–¥–∞–µ–º –º–æ–ª–µ–∫—É–ª—É –∏–∑ SMILES
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å SMILES: {smiles}")
            return None

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–æ—Ä–æ–¥—ã
        mol = Chem.AddHs(mol)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        result = AllChem.EmbedMolecule(mol, randomSeed=42)
        if result == -1:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è {smiles}")
            # –ü—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = AllChem.EmbedMolecule(mol, randomSeed=42, useRandomCoords=True)
            if result == -1:
                logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {smiles}")
                return None

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
        AllChem.MMFFOptimizeMolecule(mol)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDB —Ñ–æ—Ä–º–∞—Ç
        pdb_data = Chem.MolToPDBBlock(mol)

        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_structure_file(smiles, pdb_data)

        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ 3D —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è {smiles}")
        return pdb_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è {smiles}: {e}")
        return None


def create_3d_visualization(pdb_data: str, width: int = 600, height: int = 400) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    Args:
        pdb_data: PDB –¥–∞–Ω–Ω—ã–µ –º–æ–ª–µ–∫—É–ª—ã
        width: –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∂–µ—Ç–∞
        height: –í—ã—Å–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞

    Returns:
        HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ Py3Dmol
    # Py3Dmol —Ç—Ä–µ–±—É–µ—Ç IPython notebook, —á—Ç–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ Streamlit
    return create_3d_visualization_alternative(pdb_data, width, height)


def create_fallback_visualization(width: int = 600, height: int = 400, message: str = "3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç fallback –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ 3D –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    return f"""
    <div style="width: {width}px; height: {height}px; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: 2px solid #e9ecef; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
        <div style="text-align: center; color: white; padding: 20px;">
            <div style="font-size: 48px; margin-bottom: 16px;">üß¨</div>
            <h4 style="margin: 0 0 8px 0; font-weight: 600;">{message}</h4>
            <p style="margin: 0; opacity: 0.9;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∏–∂–µ</p>
        </div>
    </div>
    """


def create_3d_visualization_alternative(pdb_data: str, width: int = 600, height: int = 400) -> str:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ Py3Dmol - —á–∏—Å—Ç—ã–π HTML/CSS/JS —Å 3Dmol.js
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PDB –¥–∞–Ω–Ω—ã–µ
        if not pdb_data or len(pdb_data.strip()) == 0:
            return create_fallback_visualization(width, height, "–ù–µ—Ç PDB –¥–∞–Ω–Ω—ã—Ö")

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º PDB –¥–∞–Ω–Ω—ã–µ –¥–ª—è JavaScript
        escaped_pdb = pdb_data.replace('`', '\\`').replace('${', '\\${')

        # –°–æ–∑–¥–∞–µ–º HTML –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å f-—Å—Ç—Ä–æ–∫–∞–º–∏
        html_parts = [
            '<!DOCTYPE html>',
            '<html>',
            '<head>',
            '    <script src="https://3Dmol.csb.pitt.edu/build/3Dmol-min.js"></script>',
            '    <style>',
            '        #viewer {',
            '            width: ' + str(width) + 'px;',
            '            height: ' + str(height) + 'px;',
            '            position: relative;',
            '            border: 2px solid #e9ecef;',
            '            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);',
            '        }',
            '        .viewer-controls {',
            '            position: absolute;',
            '            top: 10px;',
            '            right: 10px;',
            '            z-index: 1000;',
            '            display: flex;',
            '            gap: 5px;',
            '        }',
            '        .control-btn {',
            '            background: rgba(255, 255, 255, 0.9);',
            '            border: 1px solid #dee2e6;',
            '            border-radius: 4px;',
            '            padding: 4px 8px;',
            '            font-size: 12px;',
            '            cursor: pointer;',
            '            transition: all 0.2s;',
            '        }',
            '        .control-btn:hover {',
            '            background: white;',
            '            box-shadow: 0 2px 4px rgba(0,0,0,0.1);',
            '        }',
            '    </style>',
            '</head>',
            '<body>',
            '    <div id="viewer">',
            '        <div class="viewer-controls">',
            '            <button class="control-btn" onclick="resetView()">–¶–µ–Ω—Ç—Ä</button>',
            '            <button class="control-btn" onclick="toggleSpin()">–í—Ä–∞—â–µ–Ω–∏–µ</button>',
            '            <button class="control-btn" onclick="toggleStyle()">–°—Ç–∏–ª—å</button>',
            '        </div>',
            '    </div>',
            '',
            '    <script>',
            '        let viewer;',
            '        let isSpinning = false;',
            '        let currentStyle = \'stick\';',
            '',
            '        function initViewer() {',
            '            try {',
            '                viewer = $3Dmol.createViewer(\'viewer\', {',
            '                    defaultcolors: $3Dmol.rasmolColors',
            '                });',
            '',
            '                const pdbData = `' + escaped_pdb + '`;',
            '',
            '                viewer.addModel(pdbData, \'pdb\');',
            '                viewer.setStyle({\'stick\': {\'colorscheme\': \'Jmol\'}});',
            '                viewer.zoomTo();',
            '                viewer.render();',
            '',
            '                console.log(\'3D –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\');',
            '            } catch (e) {',
            '                console.error(\'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDB:\', e);',
            '                showError(\'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\');',
            '            }',
            '        }',
            '',
            '        function resetView() {',
            '            if (viewer) {',
            '                viewer.zoomTo();',
            '                viewer.render();',
            '            }',
            '        }',
            '',
            '        function toggleSpin() {',
            '            if (!viewer) return;',
            '            isSpinning = !isSpinning;',
            '            if (isSpinning) {',
            '                viewer.spin(\'y\', 0.01);',
            '            } else {',
            '                viewer.spin(false);',
            '            }',
            '        }',
            '',
            '        function toggleStyle() {',
            '            if (!viewer) return;',
            '            const styles = [\'stick\', \'sphere\'];',
            '            const currentIndex = currentStyle === \'stick\' ? 0 : 1;',
            '            currentStyle = styles[(currentIndex + 1) % styles.length];',
            '            ',
            '            viewer.setStyle({});',
            '            if (currentStyle === \'stick\') {',
            '                viewer.setStyle({\'stick\': {\'colorscheme\': \'Jmol\'}});',
            '            } else {',
            '                viewer.setStyle({\'sphere\': {\'colorscheme\': \'Jmol\'}});',
            '            }',
            '            viewer.render();',
            '        }',
            '',
            '        function showError(message) {',
            '            const viewerDiv = document.getElementById(\'viewer\');',
            '            viewerDiv.innerHTML = \'<div style="display: flex; align-items: center; justify-content: center; height: 100%; flex-direction: column; color: #dc3545; font-family: Arial, sans-serif;"><div style="font-size: 48px; margin-bottom: 16px;">‚ö†Ô∏è</div><h4 style="margin: 0 0 8px 0;">–û—à–∏–±–∫–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</h4><p style="margin: 0; text-align: center;">\' + message + \'</p></div>\';',
            '        }',
            '',
            '        // –ó–∞–ø—É—Å–∫',
            '        if (document.readyState === \'loading\') {',
            '            document.addEventListener(\'DOMContentLoaded\', initViewer);',
            '        } else {',
            '            initViewer();',
            '        }',
            '    </script>',
            '</body>',
            '</html>'
        ]

        html = '\n'.join(html_parts)
        return html

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return create_fallback_visualization(width, height, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDB: {str(e)}")


def render_3d_structure(smiles: str, title: str = "3D –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã",
                        width: int = 600, height: int = 400) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–ª–µ–∫—É–ª—ã –≤ Streamlit —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏

    Args:
        smiles: SMILES —Å—Ç—Ä–æ–∫–∞ –º–æ–ª–µ–∫—É–ª—ã
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        width: –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∂–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
        height: –í—ã—Å–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è)
    """
    if not smiles or smiles.strip() == "":
        st.warning("SMILES —Å—Ç—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return

    st.subheader(f"üß¨ {title}")

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."):
        pdb_data = smiles_to_3d(smiles.strip())

    if pdb_data:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        container_width = min(width, 800)  # –ú–∞–∫—Å–∏–º—É–º 800px
        container_height = min(height, 500)  # –ú–∞–∫—Å–∏–º—É–º 500px
        html_content = create_3d_visualization_alternative(
            pdb_data, 
            width=container_width, 
            height=container_height
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        components.html(html_content, height=container_height, width=container_width, scrolling=False)




    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 3D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–ª–µ–∫—É–ª—ã")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if RDKIT_AVAILABLE:
            try:
                mol = Chem.MolFromSmiles(smiles.strip())
                if mol:
                    st.subheader("üñºÔ∏è 2D –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)")
                    col1, col2 = st.columns([1, 2])

                    with col1:
                        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                        img_size = min(300, 250)  # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        img = Draw.MolToImage(mol, size=(img_size, img_size))
                        st.image(img, caption="2D —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã", use_container_width=True)

                    with col2:
                        st.markdown("**–°–≤–æ–π—Å—Ç–≤–∞ –º–æ–ª–µ–∫—É–ª—ã:**")
                        st.info(f"""
                        ‚Ä¢ –ê—Ç–æ–º—ã: {mol.GetNumAtoms()}
                        ‚Ä¢ –°–≤—è–∑–∏: {mol.GetNumBonds()}
                        ‚Ä¢ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞: {Chem.rdMolDescriptors.CalcExactMolWt(mol):.2f} Da
                        ‚Ä¢ –§–æ—Ä–º—É–ª–∞: {Chem.rdMolDescriptors.CalcMolFormula(mol)}
                        """)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        with st.expander("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"):
            st.markdown("""
            **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:**
            - –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è SMILES —Å—Ç—Ä–æ–∫–∞
            - –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –º–æ–ª–µ–∫—É–ª–∞
            - –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

            **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å SMILES
            - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ SMILES –Ω–æ—Ç–∞—Ü–∏–∏
            - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Three.js –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            """)


def get_molecule_info(smiles: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–ª–µ–∫—É–ª–µ

    Args:
        smiles: SMILES —Å—Ç—Ä–æ–∫–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–ª–µ–∫—É–ª–µ
    """
    if not RDKIT_AVAILABLE:
        return {"error": "rdkit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    try:
        mol = Chem.MolFromSmiles(smiles.strip())
        if mol is None:
            return {"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è SMILES —Å—Ç—Ä–æ–∫–∞"}

        info = {
            "num_atoms": mol.GetNumAtoms(),
            "num_bonds": mol.GetNumBonds(),
            "molecular_weight": Chem.rdMolDescriptors.CalcExactMolWt(mol),
            "formula": Chem.rdMolDescriptors.CalcMolFormula(mol),
            "num_rings": Chem.rdMolDescriptors.CalcNumRings(mol),
            "logp": Chem.rdMolDescriptors.CalcCrippenDescriptors(mol)[0],
            "tpsa": Chem.rdMolDescriptors.CalcTPSA(mol),
        }

        return info

    except Exception as e:
        return {"error": str(e)}


def display_molecule_properties(smiles: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–ª–µ–∫—É–ª—ã

    Args:
        smiles: SMILES —Å—Ç—Ä–æ–∫–∞ –º–æ–ª–µ–∫—É–ª—ã
    """
    st.subheader("üìä –°–≤–æ–π—Å—Ç–≤–∞ –º–æ–ª–µ–∫—É–ª—ã")

    info = get_molecule_info(smiles)

    if "error" in info:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {info['error']}")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–æ–º–æ–≤", info["num_atoms"])
        st.metric("–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞", f"{info['molecular_weight']:.2f} Da")

    with col2:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π", info["num_bonds"])
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Ü", info["num_rings"])

    with col3:
        st.metric("LogP", f"{info['logp']:.2f}")
        st.metric("TPSA", f"{info['tpsa']:.1f} √Ö¬≤")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.json(info)


def render_2d_structure(smiles: str, title: str = "2D –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã") -> None:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º

    Args:
        smiles: SMILES —Å—Ç—Ä–æ–∫–∞ –º–æ–ª–µ–∫—É–ª—ã
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    """
    if not smiles or smiles.strip() == "":
        st.warning("SMILES —Å—Ç—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        return

    if not RDKIT_AVAILABLE:
        st.error("‚ùå rdkit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ rdkit –¥–ª—è 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return

    try:
        mol = Chem.MolFromSmiles(smiles.strip())
        if mol is None:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å SMILES —Å—Ç—Ä–æ–∫—É")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        optimal_size = min(500, 400)  # –ú–∞–∫—Å–∏–º—É–º 500px, –æ–ø—Ç–∏–º—É–º 400px
        img = Draw.MolToImage(mol, size=(optimal_size, optimal_size))

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        col1, col2 = st.columns([2, 1])

        with col1:

            st.image(img, caption="2D —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–ª–µ–∫—É–ª—ã", use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)

        with col2:

            st.markdown("### üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            col_a, col_b = st.columns(2)
            
            with col_a:
                
                st.markdown(f'<div class="structure-2d-metric-value">{mol.GetNumAtoms()}</div>', unsafe_allow_html=True)
                st.markdown('<div class="structure-2d-metric-label">–ê—Ç–æ–º—ã</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
                
                
                st.markdown(f'<div class="structure-2d-metric-value">{mol.GetNumBonds()}</div>', unsafe_allow_html=True)
                st.markdown('<div class="structure-2d-metric-label">–°–≤—è–∑–∏</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col_b:
                
                st.markdown(f'<div class="structure-2d-metric-value">{Chem.rdMolDescriptors.CalcNumRings(mol)}</div>', unsafe_allow_html=True)
                st.markdown('<div class="structure-2d-metric-label">–ö–æ–ª—å—Ü–∞</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
                
                
                st.markdown(f'<div class="structure-2d-metric-value">{Chem.rdMolDescriptors.CalcExactMolWt(mol):.1f}</div>', unsafe_allow_html=True)
                st.markdown('<div class="structure-2d-metric-label">–ú–∞—Å—Å–∞ (Da)</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown('</div>', unsafe_allow_html=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        st.markdown("### üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        logp = round(Chem.rdMolDescriptors.CalcCrippenDescriptors(mol)[0], 2)
        tpsa = round(Chem.rdMolDescriptors.CalcTPSA(mol), 1)
        aromatic_rings = Chem.rdMolDescriptors.CalcNumAromaticRings(mol)
        rotatable_bonds = Chem.rdMolDescriptors.CalcNumRotatableBonds(mol)
        
        st.markdown(f"**üß™ –•–∏–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞:** `{Chem.rdMolDescriptors.CalcMolFormula(mol)}`")
        st.markdown(f"**üìä LogP:** {logp}")
        st.markdown(f"**üìê TPSA:** {tpsa} √Ö¬≤")
        st.markdown(f"**üíç –ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞:** {aromatic_rings}")
        st.markdown(f"**üîÑ –ü–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ —Å–≤—è–∑–∏:** {rotatable_bonds}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–ª–µ–∫—É–ª—ã
        if aromatic_rings > 0:
            mol_type = "–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è"
        elif Chem.rdMolDescriptors.CalcNumRings(mol) > 0:
            mol_type = "–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è"
        else:
            mol_type = "–ê–ª–∏—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è"
        
        st.markdown(f"**üè∑Ô∏è –¢–∏–ø –º–æ–ª–µ–∫—É–ª—ã:** {mol_type}")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç–∏
        if logp < 0:
            solubility = "–•–æ—Ä–æ—à–æ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞ –≤ –≤–æ–¥–µ"
        elif logp < 3:
            solubility = "–£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞"
        else:
            solubility = "–ü–ª–æ—Ö–æ —Ä–∞—Å—Ç–≤–æ—Ä–∏–º–∞ –≤ –≤–æ–¥–µ"
        
        st.markdown(f"**üíß –†–∞—Å—Ç–≤–æ—Ä–∏–º–æ—Å—Ç—å:** {solubility}")
        
        st.markdown('</div>', unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 2D —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ 2D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è {smiles}: {e}")


def check_dependencies() -> Dict[str, bool]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    return {
        "rdkit": RDKIT_AVAILABLE,
        "py3dmol": PY3DMOL_AVAILABLE,
    }


def install_instructions() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    instructions = """
    ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    ### 1. rdkit (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä)
    ```bash
    conda install -c conda-forge rdkit
    # –∏–ª–∏
    pip install rdkit-pypi
    ```

    ### 2. Py3Dmol (–¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
    ```bash
    pip install py3Dmol
    ```

    ### 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ```bash
    pip install ipywidgets
    ```

    ### –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
    ```python
    import rdkit
    import py3Dmol
    print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    ```
    """

    return instructions
