"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π side-by-side
"""
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
try:
    # Try absolute import first
    from components.utils import get_display_name, safe_get_value, format_mass
except ImportError:
    # Fallback to relative import
    try:
        from .utils import get_display_name, safe_get_value, format_mass
    except ImportError:
        from utils import get_display_name, safe_get_value, format_mass


class CompoundComparator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""

    def __init__(self):
        self.selected_compounds = []
        self.comparison_data = {}

    def add_compound(self, compound: Dict[str, Any], compound_type: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        compound_id = f"{compound_type}_{compound.get('id', hash(str(compound)))}"
        compound_name = get_display_name(compound)

        if compound_id not in [c['id'] for c in self.selected_compounds]:
            self.selected_compounds.append({
                'id': compound_id,
                'name': compound_name,
                'type': compound_type,
                'data': compound
            })

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if len(self.selected_compounds) > 5:
                self.selected_compounds.pop(0)

    def remove_compound(self, compound_id: str):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        self.selected_compounds = [c for c in self.selected_compounds if c['id'] != compound_id]

    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.selected_compounds = []

    def get_comparison_table(self) -> pd.DataFrame:
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤"""
        if not self.selected_compounds:
            return pd.DataFrame()

        comparison_rows = []
        properties = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        for compound in self.selected_compounds:
            compound_data = compound['data']
            compound_type = compound['type']

            row = {'–ù–∞–∑–≤–∞–Ω–∏–µ': compound['name'], '–¢–∏–ø': compound_type}

            # –û–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
            if 'formula' in compound_data:
                row['–§–æ—Ä–º—É–ª–∞'] = safe_get_value(compound_data, 'formula', '‚Äî')
            if 'exact_mass' in compound_data:
                row['–ú–∞—Å—Å–∞ (Da)'] = format_mass(safe_get_value(compound_data, 'exact_mass'), '')
            if 'organism' in compound_data:
                row['–û—Ä–≥–∞–Ω–∏–∑–º'] = safe_get_value(compound_data, 'organism', '‚Äî')

            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º
            if compound_type == 'metabolites':
                if 'class_name' in compound_data:
                    row['–ö–ª–∞—Å—Å'] = safe_get_value(compound_data, 'class_name', '‚Äî')
                if 'pathway' in compound_data:
                    row['–ü—É—Ç—å'] = safe_get_value(compound_data, 'pathway', '‚Äî')

            elif compound_type == 'enzymes':
                if 'ec_number' in compound_data:
                    row['EC –Ω–æ–º–µ—Ä'] = safe_get_value(compound_data, 'ec_number', '‚Äî')
                if 'family' in compound_data:
                    row['–°–µ–º–µ–π—Å—Ç–≤–æ'] = safe_get_value(compound_data, 'family', '‚Äî')
                if 'reaction' in compound_data:
                    row['–†–µ–∞–∫—Ü–∏—è'] = safe_get_value(compound_data, 'reaction', '‚Äî')

            elif compound_type == 'proteins':
                if 'function' in compound_data:
                    row['–§—É–Ω–∫—Ü–∏—è'] = safe_get_value(compound_data, 'function', '‚Äî')
                if 'family' in compound_data:
                    row['–°–µ–º–µ–π—Å—Ç–≤–æ'] = safe_get_value(compound_data, 'family', '‚Äî')
                if 'sequence_length' in compound_data:
                    row['–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] = safe_get_value(compound_data, 'sequence_length', '‚Äî')

            elif compound_type == 'carbohydrates':
                if 'type' in compound_data:
                    row['–¢–∏–ø'] = safe_get_value(compound_data, 'type', '‚Äî')
                if 'degree_polymerization' in compound_data:
                    row['–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–º–µ—Ä–∏–∑–∞—Ü–∏–∏'] = safe_get_value(compound_data, 'degree_polymerization', '‚Äî')

            elif compound_type == 'lipids':
                if 'type' in compound_data:
                    row['–¢–∏–ø'] = safe_get_value(compound_data, 'type', '‚Äî')
                if 'fatty_acids' in compound_data:
                    row['–ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã'] = safe_get_value(compound_data, 'fatty_acids', '‚Äî')

            comparison_rows.append(row)

        if comparison_rows:
            df = pd.DataFrame(comparison_rows)
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            df = df.fillna('‚Äî')
            return df

        return pd.DataFrame()

    def create_mass_comparison_chart(self) -> Optional[go.Figure]:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Å—Å"""
        mass_data = []
        names = []

        for compound in self.selected_compounds:
            mass = safe_get_value(compound['data'], 'exact_mass')
            if mass and isinstance(mass, (int, float)):
                mass_data.append(mass)
                names.append(compound['name'])

        if len(mass_data) >= 2:
            fig = go.Figure(data=[
                go.Bar(
                    x=names,
                    y=mass_data,
                    text=[f'{m:.2f}' for m in mass_data],
                    textposition='auto',
                    marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd'][:len(names)]
                )
            ])

            fig.update_layout(
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã—Ö –º–∞—Å—Å",
                xaxis_title="–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                yaxis_title="–ú–∞—Å—Å–∞ (Da)",
                height=400
            )

            return fig

        return None

    def create_property_radar_chart(self) -> Optional[go.Figure]:
        """–°–æ–∑–¥–∞—Ç—å —Ä–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—É —Å–≤–æ–π—Å—Ç–≤"""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        numeric_props = {}

        for compound in self.selected_compounds:
            compound_data = compound['data']
            name = compound['name']

            # –°–æ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            props = {}
            if 'exact_mass' in compound_data and isinstance(compound_data['exact_mass'], (int, float)):
                props['–ú–∞—Å—Å–∞'] = compound_data['exact_mass']

            # –î–ª—è —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'k_cat' in compound_data and isinstance(compound_data['k_cat'], (int, float)):
                props['k_cat'] = compound_data['k_cat']

            if 'km' in compound_data and isinstance(compound_data['km'], (int, float)):
                props['Km'] = compound_data['km']

            if props:
                numeric_props[name] = props

        if len(numeric_props) >= 2:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
            all_props = set()
            for props in numeric_props.values():
                all_props.update(props.keys())

            if len(all_props) >= 2:
                fig = go.Figure()

                for name, props in numeric_props.items():
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—ã
                    values = []
                    for prop in all_props:
                        if prop in props:
                            values.append(props[prop])
                        else:
                            values.append(0)

                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    if values:
                        max_val = max(values) if max(values) > 0 else 1
                        values = [v/max_val for v in values]

                    fig.add_trace(go.Scatterpolar(
                        r=values,
                        theta=list(all_props),
                        fill='toself',
                        name=name
                    ))

                fig.update_layout(
                    polar=dict(radialaxis=dict(visible=True, range=[0, 1])),
                    showlegend=True,
                    title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                    height=500
                )

                return fig

        return None


def render_comparison_interface(comparator: CompoundComparator):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    st.header("üî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        if comparator.selected_compounds:
            st.subheader(f"–í—ã–±—Ä–∞–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {len(comparator.selected_compounds)}")

            # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            for compound in comparator.selected_compounds:
                cols = st.columns([3, 1])
                with cols[0]:
                    st.write(f"**{compound['name']}** ({compound['type']})")
                with cols[1]:
                    if st.button("‚ùå", key=f"remove_{compound['id']}",
                               help=f"–£–¥–∞–ª–∏—Ç—å {compound['name']}"):
                        comparator.remove_compound(compound['id'])
                        st.rerun()

    with col2:
        if comparator.selected_compounds:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", width='stretch'):
                comparator.clear_all()
                st.rerun()

    with col3:
        if len(comparator.selected_compounds) >= 2:
            if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", width='stretch', type="primary"):
                st.session_state.show_comparison = True

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    if st.session_state.get('show_comparison', False) and len(comparator.selected_compounds) >= 2:

        st.divider()

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

        comparison_df = comparator.get_comparison_table()
        if not comparison_df.empty:
            st.dataframe(
                comparison_df,
                width='stretch',
                hide_index=True
            )

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            csv = comparison_df.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
                data=csv,
                file_name="compound_comparison.csv",
                mime="text/csv",
                width='stretch'
            )

        # –î–∏–∞–≥—Ä–∞–º–º—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

        col1, col2 = st.columns(2)

        with col1:
            mass_chart = comparator.create_mass_comparison_chart()
            if mass_chart:
                st.plotly_chart(mass_chart, width='stretch')

        with col2:
            radar_chart = comparator.create_property_radar_chart()
            if radar_chart:
                st.plotly_chart(radar_chart, width='stretch')

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        if st.button("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", width='stretch'):
            st.session_state.show_comparison = False
            st.rerun()

    elif len(comparator.selected_compounds) < 2:
        st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        st.session_state.show_comparison = False


def add_to_comparison_button(compound: Dict[str, Any], compound_type: str, comparator: CompoundComparator):
    """–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
    compound_name = get_display_name(compound)
    compound_id = f"{compound_type}_{compound.get('id', hash(str(compound)))}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    is_added = compound_id in [c['id'] for c in comparator.selected_compounds]

    if is_added:
        if st.button("‚úÖ –í —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏", key=f"compare_{compound_id}", disabled=True):
            pass
    else:
        if st.button("üîç –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é", key=f"compare_{compound_id}"):
            comparator.add_compound(compound, compound_type)
            st.success(f"‚úÖ {compound_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é")
            st.rerun()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
comparison_comparator = CompoundComparator()
